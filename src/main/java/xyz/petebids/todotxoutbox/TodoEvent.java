/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package xyz.petebids.todotxoutbox;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class TodoEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7917529876061924653L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TodoEvent\",\"namespace\":\"xyz.petebids.todotxoutbox\",\"fields\":[{\"name\":\"id\",\"type\":\"string\",\"doc\":\"System-assigned numeric user ID. Cannot be changed by the user.\"},{\"name\":\"details\",\"type\":\"string\",\"doc\":\"textual detail of the todo\"},{\"name\":\"complete\",\"type\":\"boolean\",\"doc\":\"self explanatory\"},{\"name\":\"event_type\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TodoEvent> ENCODER =
      new BinaryMessageEncoder<TodoEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TodoEvent> DECODER =
      new BinaryMessageDecoder<TodoEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TodoEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TodoEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TodoEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TodoEvent>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TodoEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TodoEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TodoEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TodoEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** System-assigned numeric user ID. Cannot be changed by the user. */
   private java.lang.CharSequence id;
  /** textual detail of the todo */
   private java.lang.CharSequence details;
  /** self explanatory */
   private boolean complete;
   private java.lang.CharSequence event_type;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TodoEvent() {}

  /**
   * All-args constructor.
   * @param id System-assigned numeric user ID. Cannot be changed by the user.
   * @param details textual detail of the todo
   * @param complete self explanatory
   * @param event_type The new value for event_type
   */
  public TodoEvent(java.lang.CharSequence id, java.lang.CharSequence details, java.lang.Boolean complete, java.lang.CharSequence event_type) {
    this.id = id;
    this.details = details;
    this.complete = complete;
    this.event_type = event_type;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return details;
    case 2: return complete;
    case 3: return event_type;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: details = (java.lang.CharSequence)value$; break;
    case 2: complete = (java.lang.Boolean)value$; break;
    case 3: event_type = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return System-assigned numeric user ID. Cannot be changed by the user.
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * System-assigned numeric user ID. Cannot be changed by the user.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'details' field.
   * @return textual detail of the todo
   */
  public java.lang.CharSequence getDetails() {
    return details;
  }


  /**
   * Sets the value of the 'details' field.
   * textual detail of the todo
   * @param value the value to set.
   */
  public void setDetails(java.lang.CharSequence value) {
    this.details = value;
  }

  /**
   * Gets the value of the 'complete' field.
   * @return self explanatory
   */
  public boolean getComplete() {
    return complete;
  }


  /**
   * Sets the value of the 'complete' field.
   * self explanatory
   * @param value the value to set.
   */
  public void setComplete(boolean value) {
    this.complete = value;
  }

  /**
   * Gets the value of the 'event_type' field.
   * @return The value of the 'event_type' field.
   */
  public java.lang.CharSequence getEventType() {
    return event_type;
  }


  /**
   * Sets the value of the 'event_type' field.
   * @param value the value to set.
   */
  public void setEventType(java.lang.CharSequence value) {
    this.event_type = value;
  }

  /**
   * Creates a new TodoEvent RecordBuilder.
   * @return A new TodoEvent RecordBuilder
   */
  public static xyz.petebids.todotxoutbox.TodoEvent.Builder newBuilder() {
    return new xyz.petebids.todotxoutbox.TodoEvent.Builder();
  }

  /**
   * Creates a new TodoEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TodoEvent RecordBuilder
   */
  public static xyz.petebids.todotxoutbox.TodoEvent.Builder newBuilder(xyz.petebids.todotxoutbox.TodoEvent.Builder other) {
    if (other == null) {
      return new xyz.petebids.todotxoutbox.TodoEvent.Builder();
    } else {
      return new xyz.petebids.todotxoutbox.TodoEvent.Builder(other);
    }
  }

  /**
   * Creates a new TodoEvent RecordBuilder by copying an existing TodoEvent instance.
   * @param other The existing instance to copy.
   * @return A new TodoEvent RecordBuilder
   */
  public static xyz.petebids.todotxoutbox.TodoEvent.Builder newBuilder(xyz.petebids.todotxoutbox.TodoEvent other) {
    if (other == null) {
      return new xyz.petebids.todotxoutbox.TodoEvent.Builder();
    } else {
      return new xyz.petebids.todotxoutbox.TodoEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for TodoEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TodoEvent>
    implements org.apache.avro.data.RecordBuilder<TodoEvent> {

    /** System-assigned numeric user ID. Cannot be changed by the user. */
    private java.lang.CharSequence id;
    /** textual detail of the todo */
    private java.lang.CharSequence details;
    /** self explanatory */
    private boolean complete;
    private java.lang.CharSequence event_type;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(xyz.petebids.todotxoutbox.TodoEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.details)) {
        this.details = data().deepCopy(fields()[1].schema(), other.details);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.complete)) {
        this.complete = data().deepCopy(fields()[2].schema(), other.complete);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.event_type)) {
        this.event_type = data().deepCopy(fields()[3].schema(), other.event_type);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing TodoEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(xyz.petebids.todotxoutbox.TodoEvent other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.details)) {
        this.details = data().deepCopy(fields()[1].schema(), other.details);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.complete)) {
        this.complete = data().deepCopy(fields()[2].schema(), other.complete);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.event_type)) {
        this.event_type = data().deepCopy(fields()[3].schema(), other.event_type);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * System-assigned numeric user ID. Cannot be changed by the user.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * System-assigned numeric user ID. Cannot be changed by the user.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public xyz.petebids.todotxoutbox.TodoEvent.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * System-assigned numeric user ID. Cannot be changed by the user.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * System-assigned numeric user ID. Cannot be changed by the user.
      * @return This builder.
      */
    public xyz.petebids.todotxoutbox.TodoEvent.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'details' field.
      * textual detail of the todo
      * @return The value.
      */
    public java.lang.CharSequence getDetails() {
      return details;
    }


    /**
      * Sets the value of the 'details' field.
      * textual detail of the todo
      * @param value The value of 'details'.
      * @return This builder.
      */
    public xyz.petebids.todotxoutbox.TodoEvent.Builder setDetails(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.details = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'details' field has been set.
      * textual detail of the todo
      * @return True if the 'details' field has been set, false otherwise.
      */
    public boolean hasDetails() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'details' field.
      * textual detail of the todo
      * @return This builder.
      */
    public xyz.petebids.todotxoutbox.TodoEvent.Builder clearDetails() {
      details = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'complete' field.
      * self explanatory
      * @return The value.
      */
    public boolean getComplete() {
      return complete;
    }


    /**
      * Sets the value of the 'complete' field.
      * self explanatory
      * @param value The value of 'complete'.
      * @return This builder.
      */
    public xyz.petebids.todotxoutbox.TodoEvent.Builder setComplete(boolean value) {
      validate(fields()[2], value);
      this.complete = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'complete' field has been set.
      * self explanatory
      * @return True if the 'complete' field has been set, false otherwise.
      */
    public boolean hasComplete() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'complete' field.
      * self explanatory
      * @return This builder.
      */
    public xyz.petebids.todotxoutbox.TodoEvent.Builder clearComplete() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'event_type' field.
      * @return The value.
      */
    public java.lang.CharSequence getEventType() {
      return event_type;
    }


    /**
      * Sets the value of the 'event_type' field.
      * @param value The value of 'event_type'.
      * @return This builder.
      */
    public xyz.petebids.todotxoutbox.TodoEvent.Builder setEventType(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.event_type = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'event_type' field has been set.
      * @return True if the 'event_type' field has been set, false otherwise.
      */
    public boolean hasEventType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'event_type' field.
      * @return This builder.
      */
    public xyz.petebids.todotxoutbox.TodoEvent.Builder clearEventType() {
      event_type = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TodoEvent build() {
      try {
        TodoEvent record = new TodoEvent();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.details = fieldSetFlags()[1] ? this.details : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.complete = fieldSetFlags()[2] ? this.complete : (java.lang.Boolean) defaultValue(fields()[2]);
        record.event_type = fieldSetFlags()[3] ? this.event_type : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TodoEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<TodoEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TodoEvent>
    READER$ = (org.apache.avro.io.DatumReader<TodoEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.id);

    out.writeString(this.details);

    out.writeBoolean(this.complete);

    out.writeString(this.event_type);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);

      this.details = in.readString(this.details instanceof Utf8 ? (Utf8)this.details : null);

      this.complete = in.readBoolean();

      this.event_type = in.readString(this.event_type instanceof Utf8 ? (Utf8)this.event_type : null);

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
          break;

        case 1:
          this.details = in.readString(this.details instanceof Utf8 ? (Utf8)this.details : null);
          break;

        case 2:
          this.complete = in.readBoolean();
          break;

        case 3:
          this.event_type = in.readString(this.event_type instanceof Utf8 ? (Utf8)this.event_type : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










